.data
	label:	.asciiz "-0xabc"


.text
	la $a0, label
	jal textToBinVal
	add $a0, $v0, $zero
	li $v0, 10
	syscall






#a0:	address in memory of first char of value
#v0:	value of the string in binary form
#v1:	-1 if error
textToBinVal:
	add $v1, $zero, $zero
	add $s0, $zero, $ra	#store the return address in s0
	add $s4, $zero, $zero	#s4 keeps the cumulative sum
	#use s1 to find the last spot in the text array
	add $s1, $zero, $a0

#find the last spot in the array
textToBinVal_findLastLoop:
	lbu $t0, 0($s1)
	jal charToVal
	beq $t0, -1, textToBinVal_detType	#character doesn't have a corresponding value
	addi $s1, $s1, 1
	j textToBinVal_findLastLoop

#determine whether hexadecimal or decimal by looking at second char in array
textToBinVal_detType:
	lbu $t0, 1($a0)
	beq $t0, 88, hexToBin_findVal	#if second char in text is 'X'
	beq $t0, 120, hexToBin_findVal	#or 'x'	then it should be in hexadecimal format
	
	
#find the value of the char array
decToBin_findVal:
	addi $t1, $zero, 1	#t1 is the power of ten (the position of current char)
	addi $t4, $zero, 10	#constant value of 10 for mult reasons
	sub $s1, $s1, 1		#trim the non-digit off the tracer s1
decToBin_findVal_Loop:
	slt $s3, $s1, $a0	#s3 is 1 when s1 is less than the address value of a0
	beq $s3, 1, decToBin_done
	lbu $t0, 0($s1)	#get the ascii char of the digit
	sub $s1, $s1, 1
	jal charToVal	#get the value corresponding to ascii char (will be in t0)
	beq $t9, -1, decToBin_error	#if char was a hex value then error (we're assuming decimal)
	beq $t0, -2, decToBin_minus
	#multiply the value in t0 by the power of 10
	multu $t0, $t1
	mflo $t3
	#add this to the ongoing sum in s4
	add $s4, $s4, $t3
	#multiply the power of ten in t1 by 10
	multu $t1, $t4
	mflo $t1	#put the result back in t1
	j decToBin_findVal_Loop

decToBin_minus:
	sub $v0, $zero, $s4	#put negative of cumulative sum in return register
	jr $s0
decToBin_done:
	add $v0, $s4, $zero	#put cumulative sum in return register
	jr $s0
decToBin_error:
	addi $v1, $zero, -1
	jr $s0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hexToBin_findVal:
	addi $t1, $zero, 1	#t1 is the power of 16 (the position of current char)
	addi $t4, $zero, 0	#shift left each time by value in t4, increment by 4 after each shifting
	sub $s1, $s1, 1		#trim the non-digit off the tracer s1
hexToBin_findVal_Loop:
	lbu $t0, 0($s1)			#get the ascii char of the digit
	beq $t0, 88, hexToBin_done	#Done when we find 'X'
	beq $t0, 120, hexToBin_done	#or 'x' at front of string
	beq $t4, 32, hexToBin_error	#too many characters
	sub $s1, $s1, 1
	jal charToVal	#get the value corresponding to ascii char (will be in t0)
	beq $t0, -1, hexToBin_error	#if not a value character then error

	sllv $t0, $t0, $t4
	#add this to the ongoing sum in s4
	or $s4, $s4, $t0
	addi $t4, $t4, 4
	j hexToBin_findVal_Loop

hexToBin_done:
	add $v0, $zero, $s4	#put the cumulative "sum" into v0
	jr $s0
	
hexToBin_error:
	addi $v1, $zero, -1
	jr $s0



#RECIEVES INPUT THROUGH T0, OUTPUTS THROUGH T0
#find value of ascii digit, -1 if not a number digit,-2 if a '-'
#t9 = -1 iff	t0 is a hex only character
charToVal:
	add $t9, $zero, $zero
	beq $t0, 48, charToVal_ZERO
	beq $t0, 49, charToVal_ONE
	beq $t0, 50, charToVal_TWO
	beq $t0, 51, charToVal_THREE
	beq $t0, 52, charToVal_FOUR
	beq $t0, 53, charToVal_FIVE
	beq $t0, 54, charToVal_SIX
	beq $t0, 55, charToVal_SEVEN
	beq $t0, 56, charToVal_EIGHT
	beq $t0, 57, charToVal_NINE
	beq $t0, 65, charToVal_A
	beq $t0, 97, charToVal_A
	beq $t0, 66, charToVal_B
	beq $t0, 98, charToVal_B
	beq $t0, 67, charToVal_C
	beq $t0, 99, charToVal_C
	beq $t0, 68, charToVal_D
	beq $t0, 100, charToVal_D
	beq $t0, 69, charToVal_E
	beq $t0, 101, charToVal_E
	beq $t0, 70, charToVal_F
	beq $t0, 102, charToVal_F
	#seems strange, but made it work
	beq $t0, 88, charToVal_X
	beq $t0, 120, charToVal_X
	beq $t0, 45, charToVal_MINUS
	#uninteresting character
	subi $t0, $zero, 1
	jr $ra
charToVal_MINUS:
	sub $t0, $zero, 2
	jr $ra
charToVal_ZERO:
	addi $t0, $zero, 0
	jr $ra
charToVal_ONE:
	addi $t0, $zero, 1
	jr $ra
charToVal_TWO:
	addi $t0, $zero, 2
	jr $ra
charToVal_THREE:
	addi $t0, $zero, 3
	jr $ra
charToVal_FOUR:
	addi $t0, $zero, 4
	jr $ra
charToVal_FIVE:
	addi $t0, $zero, 5
	jr $ra
charToVal_SIX:
	addi $t0, $zero, 6
	jr $ra
charToVal_SEVEN:
	addi $t0, $zero, 7
	jr $ra
charToVal_EIGHT:
	addi $t0, $zero, 8
	jr $ra
charToVal_NINE:
	addi $t0, $zero, 9
	jr $ra
charToVal_A:
	addi $t0, $zero, 10
	addi $t9, $zero, -1
	jr $ra
charToVal_B:
	addi $t0, $zero, 11
	addi $t9, $zero, -1
	jr $ra
charToVal_C:
	addi $t0, $zero, 12
	addi $t9, $zero, -1
	jr $ra
charToVal_D:
	addi $t0, $zero, 13
	addi $t9, $zero, -1
	jr $ra
charToVal_E:
	addi $t0, $zero, 14
	addi $t9, $zero, -1
	jr $ra
charToVal_F:
	addi $t0, $zero, 15
	addi $t9, $zero, -1
	jr $ra	
charToVal_X:
	addi $t0, $zero, 0
	addi $t9, $zero, -1
	jr $ra	
	