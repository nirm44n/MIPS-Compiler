.data
	Code: .asciiz "addi $a0, $t1, 4"
	newline: .asciiz "\n"
.text
#####      Test Cases             #####
#	OP:   sll
#	Reg:   all except s0-s7 (s's are not working)
#	all immediates

#####      KNOWN REGISTERS        ######
#
#	$s0	command code
#	$s1	whitespace pointer
#	$a0	used for op/reg parsing
#	$a1	used for reg parsing
#	$v1	R-I-J format decider	
#	$s2	outputs binary string	
#	$t1	holds sum of ascii character values
#	$s6     used for immediate processing set to one before calling immediate values
#		
	
	la $s0, Code
	j OP_finder
I_standard_reg_1:
	lb $s1, 0($s0)
	addi $s0, $s0, 1			# s0 will point to a $ at the end of this operation
	bne $s1, 0x20, I_standard_reg_1
	addi $s0, $s0, 1			# s0 = alpha
	lb $a0, 0($s0)
	addi $s0, $s0, 1			# s0 = alpha/integer
	lb $a1, 0($s0)
	jal regToCode
I_standard_or_first:
	sll $v0, $v0, 16		# or's together the binary form of the register with the output binary string after shifting it 16 places 
	or $s2, $s2, $v0
	j I_standard_reg_2
I_standard_reg_2:
	li $v0, 0
	lb $s1, 0($s0)
	addi $s0, $s0, 1			# s0 will point to a $ at the end of this operation
	bne $s1, 0x20, I_standard_reg_2
	addi $s0, $s0, 1			# s0 = alpha
	lb $a0, 0($s0)
	addi $s0, $s0, 1			# s0 = alpha/integer
	lb $a1, 0($s0)
	jal regToCode
I_standard_or_second:
	sll $v0, $v0, 21		# or's together the binary form of the register with the output binary string after shifting it 21 places 
	or $s2, $s2, $v0
	j I_standard_immediate
I_standard_immediate:
	li $v0, 0
	lb $s1 0($s0)			# s0 = end of string
	add $s0, $s0, 1	
	bne $s1, 0x20 I_standard_immediate
					######     Debugging zone      ###############
	move $a0, $s0
	
	beq $s1, 0x00, end		# totally just trying something out
					#############################################
	jal textToBinVal
I_standard_or_immediate:
	or $s2, $s2, $v0
	j end
end:
	move $a0, $s2
	li $v0, 35
	syscall
	
	li $v0, 10
	syscall


########################              immediate codes                 ################################
#a0:	address in memory of first char of value
#v0:	value of the string in binary form
#v1:	-1 if error
textToBinVal:
	add $v1, $zero, $zero
	add $s0, $zero, $ra	#store the return address in s0
	add $s4, $zero, $zero	#s4 keeps the cumulative sum
	#use s1 to find the last spot in the text array
	add $s1, $zero, $a0

#find the last spot in the array
textToBinVal_findLastLoop:
	lbu $t0, 0($s1)
	jal charToVal
	beq $t0, -1, textToBinVal_detType	#character doesn't have a corresponding value
	addi $s1, $s1, 1
	j textToBinVal_findLastLoop

#determine whether hexadecimal or decimal by looking at second char in array
textToBinVal_detType:
	lbu $t0, 1($a0)
	beq $t0, 88, hexToBin_findVal	#if second char in text is 'X'
	beq $t0, 120, hexToBin_findVal	#or 'x'	then it should be in hexadecimal format
	
	
#find the value of the char array
decToBin_findVal:
	addi $t1, $zero, 1	#t1 is the power of ten (the position of current char)
	addi $t4, $zero, 10	#constant value of 10 for mult reasons
	sub $s1, $s1, 1		#trim the non-digit off the tracer s1
decToBin_findVal_Loop:
	slt $s3, $s1, $a0	#s3 is 1 when s1 is less than the address value of a0
	beq $s3, 1, decToBin_done
	lbu $t0, 0($s1)	#get the ascii char of the digit
	sub $s1, $s1, 1
	jal charToVal	#get the value corresponding to ascii char (will be in t0)
	beq $t9, -1, decToBin_error	#if char was a hex value then error (we're assuming decimal)
	beq $t0, -2, decToBin_minus
	#multiply the value in t0 by the power of 10
	multu $t0, $t1
	mflo $t3
	#add this to the ongoing sum in s4
	add $s4, $s4, $t3
	#multiply the power of ten in t1 by 10
	multu $t1, $t4
	mflo $t1	#put the result back in t1
	j decToBin_findVal_Loop

decToBin_minus:
	sub $v0, $zero, $s4	#put negative of cumulative sum in return register
	jr $s0
decToBin_done:
	add $v0, $s4, $zero	#put cumulative sum in return register
	jr $s0
decToBin_error:
	addi $v1, $zero, -1
	jr $s0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hexToBin_findVal:
	addi $t1, $zero, 1	#t1 is the power of 16 (the position of current char)
	addi $t4, $zero, 0	#shift left each time by value in t4, increment by 4 after each shifting
	sub $s1, $s1, 1		#trim the non-digit off the tracer s1
hexToBin_findVal_Loop:
	lbu $t0, 0($s1)			#get the ascii char of the digit
	beq $t0, 88, hexToBin_done	#Done when we find 'X'
	beq $t0, 120, hexToBin_done	#or 'x' at front of string
	beq $t4, 32, hexToBin_error	#too many characters
	sub $s1, $s1, 1
	jal charToVal	#get the value corresponding to ascii char (will be in t0)
	beq $t0, -1, hexToBin_error	#if not a value character then error

	sllv $t0, $t0, $t4
	#add this to the ongoing sum in s4
	or $s4, $s4, $t0
	addi $t4, $t4, 4
	j hexToBin_findVal_Loop

hexToBin_done:
	add $v0, $zero, $s4	#put the cumulative "sum" into v0
	jr $s0
	
hexToBin_error:
	addi $v1, $zero, -1
	jr $s0



#RECIEVES INPUT THROUGH T0, OUTPUTS THROUGH T0
#find value of ascii digit, -1 if not a number digit,-2 if a '-'
#t9 = -1 iff	t0 is a hex only character
charToVal:
	add $t9, $zero, $zero
	beq $t0, 48, charToVal_ZERO
	beq $t0, 49, charToVal_ONE
	beq $t0, 50, charToVal_TWO
	beq $t0, 51, charToVal_THREE
	beq $t0, 52, charToVal_FOUR
	beq $t0, 53, charToVal_FIVE
	beq $t0, 54, charToVal_SIX
	beq $t0, 55, charToVal_SEVEN
	beq $t0, 56, charToVal_EIGHT
	beq $t0, 57, charToVal_NINE
	beq $t0, 65, charToVal_A
	beq $t0, 97, charToVal_A
	beq $t0, 66, charToVal_B
	beq $t0, 98, charToVal_B
	beq $t0, 67, charToVal_C
	beq $t0, 99, charToVal_C
	beq $t0, 68, charToVal_D
	beq $t0, 100, charToVal_D
	beq $t0, 69, charToVal_E
	beq $t0, 101, charToVal_E
	beq $t0, 70, charToVal_F
	beq $t0, 102, charToVal_F
	#seems strange, but made it work
	beq $t0, 88, charToVal_X
	beq $t0, 120, charToVal_X
	beq $t0, 45, charToVal_MINUS
	#uninteresting character
	subi $t0, $zero, 1
	jr $ra
charToVal_MINUS:
	sub $t0, $zero, 2
	jr $ra
charToVal_ZERO:
	addi $t0, $zero, 0
	jr $ra
charToVal_ONE:
	addi $t0, $zero, 1
	jr $ra
charToVal_TWO:
	addi $t0, $zero, 2
	jr $ra
charToVal_THREE:
	addi $t0, $zero, 3
	jr $ra
charToVal_FOUR:
	addi $t0, $zero, 4
	jr $ra
charToVal_FIVE:
	addi $t0, $zero, 5
	jr $ra
charToVal_SIX:
	addi $t0, $zero, 6
	jr $ra
charToVal_SEVEN:
	addi $t0, $zero, 7
	jr $ra
charToVal_EIGHT:
	addi $t0, $zero, 8
	jr $ra
charToVal_NINE:
	addi $t0, $zero, 9
	jr $ra
charToVal_A:
	addi $t0, $zero, 10
	addi $t9, $zero, -1
	jr $ra
charToVal_B:
	addi $t0, $zero, 11
	addi $t9, $zero, -1
	jr $ra
charToVal_C:
	addi $t0, $zero, 12
	addi $t9, $zero, -1
	jr $ra
charToVal_D:
	addi $t0, $zero, 13
	addi $t9, $zero, -1
	jr $ra
charToVal_E:
	addi $t0, $zero, 14
	addi $t9, $zero, -1
	jr $ra
charToVal_F:
	addi $t0, $zero, 15
	addi $t9, $zero, -1
	jr $ra	
charToVal_X:
	addi $t0, $zero, 0
	addi $t9, $zero, -1
	jr $ra


########################              Operand Codes                   ################################

OP_finder:
	lb $a0, 0($s0)
	addi $s0, $s0, 1
	beq $t1, 402, OP_addi

OP_alpha_table:
	beq $a0, 0x61, OP_alpha_a
	beq $a0, 0x64, OP_alpha_d
	beq $a0, 0x69, OP_alpha_i
	
OP_alpha_a:
	addi $t1, $t1, 97
	j OP_finder
OP_alpha_d:
	addi $t1, $t1, 100
	j OP_finder
OP_alpha_i:
	addi $t1, $t1, 105
	j OP_finder

OP_addi:					#  Here I create the OPcode for the binary string
	ori $s2, $s2, 0x8		# funct
	sll $s2, $s2, 26
	addi $s0, $s0, -1
	j I_standard_reg_1
	

########################              Register Codes                  ################################


regToCode:
	#move $ra to $s0, jump back to $s0 at end, use ra for jumping w/in procedure
	
	add $s7, $ra, $zero

	#Load character codes into temp registers for comparison
	#char code loaded	#char
	li $t0, 122		#z
	li $t1, 97		#a
	li $t2, 118		#v
	li $t3, 116		#t
	li $t4, 115		#s
	li $t5, 107		#k
	li $t6, 103		#g
	li $t7, 102		#f
	li $t8, 114		#r
	
	beq $a0, $t0, regToCode_firstZ	#first character is z
	beq $a0, $t1, regToCode_firstA	#first character is a
	beq $a0, $t2, regToCode_firstV	#first character is v
	beq $a0, $t3, regToCode_firstT	#first character is t
	beq $a0, $t4, regToCode_firstS	#first character is s
	beq $a0, $t5, regToCode_firstK	#first character is k
	beq $a0, $t6, regToCode_firstG	#first character is g
	beq $a0, $t7, regToCode_firstF	#first character is f
	beq $a0, $t8, regToCode_firstR	#first character is r
	j regToCode_ERROR		#first character is invalid
	
regToCode_firstZ:	#Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z
	#only possible register is $zero
	li $v0, 0
	j regToCode_exit
	
regToCode_firstA:	#A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
	beq $a1, $t3, regToCode_firstA_at	#second character is t
	jal regToCode_loadNumCodes
	beq $a1, $t0, regToCode_firstA_a0	#second char is 0
	beq $a1, $t1, regToCode_firstA_a1	#second char is 1
	beq $a1, $t2, regToCode_firstA_a2	#second char is 2
	beq $a1, $t3, regToCode_firstA_a3	#second char is 3
	j regToCode_ERROR			#second char is invalid
	
regToCode_firstA_at:
	li $v0, 1
	j regToCode_exit
	
regToCode_firstA_a0:
	li $v0, 4
	j regToCode_exit
regToCode_firstA_a1:
	li $v0, 5
	j regToCode_exit
regToCode_firstA_a2:
	li $v0, 6
	j regToCode_exit
regToCode_firstA_a3:
	li $v0, 7
	j regToCode_exit
	
	
	
regToCode_firstV:	#V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V
	jal regToCode_loadNumCodes
	beq $a1, $t0, regToCode_firstV_v0	#second char 0
	beq $a1, $t1, regToCode_firstV_v1	#second char 1
	j regToCode_ERROR
regToCode_firstV_v0:
	li $v0, 2
	j regToCode_exit
regToCode_firstV_v1:
	li $v0, 3
	j regToCode_exit
	
	
regToCode_firstT:	#T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T
	jal regToCode_loadNumCodes
	beq $a1, $t0, regToCode_firstT_t0	#second char 0
	beq $a1, $t1, regToCode_firstT_t1	#second char 1
	beq $a1, $t2, regToCode_firstT_t2	#second char 2
	beq $a1, $t3, regToCode_firstT_t3	#second char 3
	beq $a1, $t4, regToCode_firstT_t4	#second char 4
	beq $a1, $t5, regToCode_firstT_t5	#second char 5
	beq $a1, $t6, regToCode_firstT_t6	#second char 6
	beq $a1, $t7, regToCode_firstT_t7	#second char 7
	beq $a1, $t8, regToCode_firstT_t8	#second char 8
	beq $a1, $t9, regToCode_firstT_t9	#second char 9
	j regToCode_ERROR			#second char invalid
	
regToCode_firstT_t0:
	li $v0, 8
	j regToCode_exit
regToCode_firstT_t1:
	li $v0, 9
	j regToCode_exit
regToCode_firstT_t2:
	li $v0, 10
	j regToCode_exit
regToCode_firstT_t3:
	li $v0, 11
	j regToCode_exit
regToCode_firstT_t4:
	li $v0, 12
	j regToCode_exit
regToCode_firstT_t5:
	li $v0, 13
	j regToCode_exit
regToCode_firstT_t6:
	li $v0, 14
	j regToCode_exit
regToCode_firstT_t7:
	li $v0, 15
	j regToCode_exit
regToCode_firstT_t8:
	li $v0, 24
	j regToCode_exit
regToCode_firstT_t9:
	li $v0, 25
	j regToCode_exit
			
regToCode_firstS:	#S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S
	beq $a1, 112, regToCode_firstS_sp	#second char p	112 is the decimal code for 'p'
	#jal regToCode_loadNumCodes:
	beq $a1, $t0, regToCode_firstS_s0	#second char 0
	beq $a1, $t1, regToCode_firstS_s1	#second char 1
	beq $a1, $t2, regToCode_firstS_s2	#second char 2
	beq $a1, $t3, regToCode_firstS_s3	#second char 3
	beq $a1, $t4, regToCode_firstS_s4	#second char 4
	beq $a1, $t5, regToCode_firstS_s5	#second char 5
	beq $a1, $t6, regToCode_firstS_s6	#second char 6
	beq $a1, $t7, regToCode_firstS_s7	#second char 7
	j regToCode_ERROR
	
regToCode_firstS_sp:
	li $v0, 29
	j regToCode_exit
regToCode_firstS_s0:
	li $v0, 16
	j regToCode_exit
regToCode_firstS_s1:
	li $v0, 17
	j regToCode_exit
regToCode_firstS_s2:
	li $v0, 18
	j regToCode_exit
regToCode_firstS_s3:
	li $v0, 19
	j regToCode_exit
regToCode_firstS_s4:
	li $v0, 20
	j regToCode_exit
regToCode_firstS_s5:
	li $v0, 21
	j regToCode_exit
regToCode_firstS_s6:
	li $v0, 22
	j regToCode_exit
regToCode_firstS_s7:
	li $v0, 23
	j regToCode_exit
	
regToCode_firstK:	#K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K
	jal regToCode_loadNumCodes
	beq $a1, $t0, regToCode_firstK_k0	#second char 0
	beq $a1, $t1, regToCode_firstK_k1	#second char 1
	j regToCode_ERROR			#second char invalid

regToCode_firstK_k0:
	li $v0, 26
	j regToCode_exit
regToCode_firstK_k1:
	li $v0, 27
	j regToCode_exit
	
regToCode_firstG:	#G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G
	li $v0, 28	#only $gp starts with g
	j regToCode_exit
	
regToCode_firstF:	#F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F
	li $v0, 30	#only $fp starts with f
	j regToCode_exit

regToCode_firstR:	#R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R
	li $v0, 31	#only $ra starts with r
	j regToCode_exit
	
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
regToCode_loadNumCodes:
	#char code loaded	#char
	li $t0, 48		#0
	li $t1, 49		#1
	li $t2, 50		#2
	li $t3, 51		#3
	li $t4, 52		#4
	li $t5, 53		#5
	li $t6, 54		#6
	li $t7, 55		#7
	li $t8, 56		#8
	li $t9, 57		#9
	#jump back
	jr $ra

regToCode_ERROR:
	li $v0, 0xFFFFFFFF	#ERROR  ERROR  ERROR  ERROR  ERROR

regToCode_exit:
	jr $s7
