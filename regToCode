#Expectation:
#after reading a $ put next two chars into a0, a1
#using this method $s4fja is just as legitimate as $s4
#$z is just as legitimate as $zero due to checking
#similarly for other uniquely named registers
#this is a feature :)

#returns decimal version of the register through $v0

#if optimization is wanted we can compare directly to the decimal values of characters
#this was decided against originally because I thought loading things into registers
#would make the code more legible
regToCode:
	#move $ra to $s0, jump back to $s0 at end, use ra for jumping w/in procedure
	add $s0, $ra, $zero

	#Load character codes into temp registers for comparison
	#char code loaded	#char
	li $t0, 122		#z
	li $t1, 97		#a
	li $t2, 118		#v
	li $t3, 116		#t
	li $t4, 115		#s
	li $t5, 107		#k
	li $t6, 103		#g
	li $t7, 102		#f
	li $t8, 114		#r
	
	beq $a0, $t0, regToCode_firstZ	#first character is z
	beq $a0, $t1, regToCode_firstA	#first character is a
	beq $a0, $t2, regToCode_firstV	#first character is v
	beq $a0, $t3, regToCode_firstT	#first character is t
	beq $a0, $t4, regToCode_firstS	#first character is s
	beq $a0, $t5, regToCode_firstK	#first character is k
	beq $a0, $t6, regToCode_firstG	#first character is g
	beq $a0, $t7, regToCode_firstF	#first character is f
	beq $a0, $t8, regToCode_firstR	#first character is r
	j regToCode_ERROR		#first character is invalid
	
regToCode_firstZ:	#Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z
	#only possible register is $zero
	li $v0, 0
	j regToCode_Exit
	
regToCode_firstA:	#A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
	beq $a1, $t3, regToCode_firstA_at	#second character is t
	jal regToCode_loadNumCodes
	beq $a1, $t0, regToCode_firstA_a0	#second char is 0
	beq $a1, $t1, regToCode_firstA_a1	#second char is 1
	beq $a1, $t2, regToCode_firstA_a2	#second char is 2
	beq $a1, $t3, regToCode_firstA_a3	#second char is 3
	j regToCode_ERROR			#second char is invalid
	
regToCode_firstA_at:
	li $v0, 1
	j regToCode_exit
	
regToCode_firstA_a0:
	li $v0, 4
	j regToCode_exit
regToCode_firstA_a1:
	li $v0, 5
	j regToCode_exit
regToCode_firstA_a2:
	li $v0, 6
	j regToCode_exit
regToCode_firstA_a3:
	li $v0, 7
	j regToCode_exit
	
	
	
regToCode_firstV:	#V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V V
	jal regToCode_loadNumCodes
	beq $a1, $t0, regToCode_firstV_v0	#second char 0
	beq $a1, $t1, regToCode_firstV_v1	#second char 1
	j regToCode_ERROR
regToCode_firstV_v0:
	li $v0, 2
	j regToCode_exit
regToCode_firstV_v1:
	li $v0, 3
	j regToCode_exit
	
	
regToCode_firstT:	#T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T
	jal regToCode_loadNumCodes
	beq $a1, $t0, regToCode_firstT_t0	#second char 0
	beq $a1, $t1, regToCode_firstT_t1	#second char 1
	beq $a1, $t2, regToCode_firstT_t2	#second char 2
	beq $a1, $t3, regToCode_firstT_t3	#second char 3
	beq $a1, $t4, regToCode_firstT_t4	#second char 4
	beq $a1, $t5, regToCode_firstT_t5	#second char 5
	beq $a1, $t6, regToCode_firstT_t6	#second char 6
	beq $a1, $t7, regToCode_firstT_t7	#second char 7
	beq $a1, $t8, regToCode_firstT_t8	#second char 8
	beq $a1, $t9, regToCode_firstT_t9	#second char 9
	j regToCode_ERROR			#second char invalid
	
regToCode_firstT_t0:
	li $v0, 8
	j regToCode_exit
regToCode_firstT_t1:
	li $v0, 9
	j regToCode_exit
regToCode_firstT_t2:
	li $v0, 10
	j regToCode_exit
regToCode_firstT_t3:
	li $v0, 11
	j regToCode_exit
regToCode_firstT_t4:
	li $v0, 12
	j regToCode_exit
regToCode_firstT_t5:
	li $v0, 13
	j regToCode_exit
regToCode_firstT_t6:
	li $v0, 14
	j regToCode_exit
regToCode_firstT_t7:
	li $v0, 15
	j regToCode_exit
regToCode_firstT_t8:
	li $v0, 24
	j regToCode_exit
regToCode_firstT_t9:
	li $v0, 25
	j regToCode_exit
			
regToCode_firstS:	#S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S
	beq $a1, 112, regToCode_firstS_sp	#second char p	112 is the decimal code for 'p'
	jal regToCode_loadNumCodes:
	beq $a1, $t0, regToCode_firstS_s0	#second char 0
	beq $a1, $t1, regToCode_firstS_s1	#second char 1
	beq $a1, $t2, regToCode_firstS_s2	#second char 2
	beq $a1, $t3, regToCode_firstS_s3	#second char 3
	beq $a1, $t4, regToCode_firstS_s4	#second char 4
	beq $a1, $t5, regToCode_firstS_s5	#second char 5
	beq $a1, $t6, regToCode_firstS_s6	#second char 6
	beq $a1, $t7, regToCode_firstS_s7	#second char 7
	j regToCode_ERROR
	
regToCode_firstS_sp:
	li $v0, 29
	j regToCode_exit
regToCode_firstS_s0:
	li $v0, 16
	j regToCode_exit
regToCode_firstS_s1:
	li $v0, 17
	j regToCode_exit
regToCode_firstS_s2:
	li $v0, 18
	j regToCode_exit
regToCode_firstS_s3:
	li $v0, 19
	j regToCode_exit
regToCode_firstS_s4:
	li $v0, 20
	j regToCode_exit
regToCode_firstS_s5:
	li $v0, 21
	j regToCode_exit
regToCode_firstS_s6:
	li $v0, 22
	j regToCode_exit
regToCode_firstS_s7:
	li $v0, 23
	j regToCode_exit
	
regToCode_firstK:	#K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K K
	jal regToCode_loadNumCodes
	beq $a1, $t0, regToCode_firstK_k0	#second char 0
	beq $a1, $t1, regToCode_firstK_k1	#second char 1
	j regToCode_ERROR			#second char invalid

regToCode_firstK_k0:
	li $v0, 26
	j regToCode_exit
regToCode_firstK_k1:
	li $v0, 27
	j regToCode_exit
	
regToCode_firstG:	#G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G
	li $v0, 28	#only $gp starts with g
	j regToCode_exit
	
regToCode_firstF:	#F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F F
	li $v0, 30	#only $fp starts with f
	j regToCode_exit

regToCode_firstR:	#R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R
	li $v0, 31	#only $ra starts with r
	j regToCode_exit
	
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
regToCode_loadNumCodes:
	#char code loaded	#char
	li $t0, 48		#0
	li $t1, 49		#1
	li $t2, 50		#2
	li $t3, 51		#3
	li $t4, 52		#4
	li $t5, 53		#5
	li $t6, 54		#6
	li $t7, 55		#7
	li $t8, 56		#8
	li $t9, 57		#9
	#jump back
	jr $ra

regToCode_ERROR:
	li $v0, 0xFFFFFFFF	#ERROR  ERROR  ERROR  ERROR  ERROR

regToCode_exit:
	jr $s0